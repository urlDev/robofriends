{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSeachChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af3262f3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id}) => { //instead of name,email,id; we could write props. props.name and props.id\r\n    return (\r\n        \r\n        <div className=\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n         <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2> \r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist = ({ robots }) => {\r\n    \r\n    return (\r\n        <div>\r\n            {robots.map((user, i)=> {\r\n             return <Card key={i} id = { robots[i].id }\r\n                    name = { robots[i].name }\r\n                    email = { robots[i].email }/> \r\n             })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cardlist;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return ( <\r\n        div className = \"pa2\" >\r\n        <\r\n        input className = \"pa3 ba b--green bg-lightest-blue\"\r\n        type = \"search\"\r\n        placeholder = \"search robots\"\r\n        onChange = { searchChange }\r\n        / > <\r\n        /div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY:\"scroll\", border:\"3px solid black\", height:\"800px\" }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((users) => this.setState({ robots: users }));\r\n\t}\r\n\r\n\tonSeachChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter((robot) => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\"> RoboFriends </h1> <SearchBox searchChange={this.onSeachChange} />{' '}\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />{' '}\r\n\t\t\t\t</Scroll>{' '}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n// import { robots } from \"./robots\";\n//we put curly braces because robots are not \n//default like Cards. when they are not default and you create something new, \n//its with braces\n\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}